// this file generated by tools,don't edit it!!!
package csvdef
import (
	"roomcell/pkg/configdata/csvparse"
	"strings"

	"github.com/sirupsen/logrus"
)
const (
	WordTypeColumnID = iota
	WordTypeColumnTypeName
)
type WordType struct {
	ID      	int32
	TypeName	string
}
type WordTypeCfgModule struct {
	cfgMap  map[int32]*WordType
	cfgList []*WordType
}

func NewWordTypeCfgModule() *WordTypeCfgModule {
	return &WordTypeCfgModule{
		cfgMap: make(map[int32]*WordType),
	}
}

func (cfgMod *WordTypeCfgModule) Load(lineList []string) {
	logrus.Info("WordTypeCfgModule begin load")
	cfgMod.cfgList=make([]*WordType, len(lineList))
	for i, lstr := range lineList {
		columnList := strings.Split(lstr, ",")
		oneData := &WordType{}
		oneData.ID = csvparse.ParseColumnInt(columnList[WordTypeColumnID])
		oneData.TypeName = csvparse.ParseColumnString(columnList[WordTypeColumnTypeName])
		cfgMod.cfgMap[oneData.ID] = oneData
		cfgMod.cfgList[i] = oneData
	}
	logrus.Infof("WordTypeCfgModule load finish!dataNum:%d",len(cfgMod.cfgList))
}

func (cfgMod *WordTypeCfgModule) GetData(id int32) *WordType {
	if cfg, ok := cfgMod.cfgMap[id]; ok {
		return cfg
	}
	return nil
}

func (cfgMod *WordTypeCfgModule) GetDataList() []*WordType {
	return cfgMod.cfgList
}
